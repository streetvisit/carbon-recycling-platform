---
// pages/dashboard/suppliers.astro - Supplier management dashboard for host organization

import Layout from '../../layouts/Layout.astro'
---
  <Layout title="Suppliers | Carbon Recycling Platform">
    <div class="min-h-screen bg-gray-50">
      <!-- Header -->
      <div class="bg-white shadow">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="py-6">
            <div class="flex items-center justify-between">
              <div>
                <h1 class="text-2xl font-bold text-gray-900">Supplier Management</h1>
                <p class="text-sm text-gray-500 mt-1">
                  Manage your supplier relationships and collect Scope 3 emissions data
                </p>
              </div>
              <div class="flex gap-4">
                <button
                  id="createDataRequestBtn"
                  class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors flex items-center gap-2"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M12 4v16m8-8H4" />
                  </svg>
                  Request Data
                </button>
                <a 
                  href="/dashboard/suppliers/requests"
                  class="border border-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-50 transition-colors"
                >
                  View Requests
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Main Content -->
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="space-y-8">
          <!-- Quick Stats -->
          <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div class="bg-white rounded-lg shadow p-6">
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <div class="w-8 h-8 bg-blue-100 rounded-md flex items-center justify-center">
                    <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM9 3a2 2 0 11-4 0 2 2 0 014 0z" />
                    </svg>
                  </div>
                </div>
                <div class="ml-4">
                  <div class="text-sm font-medium text-gray-500">Total Suppliers</div>
                  <div class="text-2xl font-bold text-gray-900" id="totalSuppliersCount">-</div>
                </div>
              </div>
            </div>

            <div class="bg-white rounded-lg shadow p-6">
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <div class="w-8 h-8 bg-green-100 rounded-md flex items-center justify-center">
                    <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                </div>
                <div class="ml-4">
                  <div class="text-sm font-medium text-gray-500">Active Suppliers</div>
                  <div class="text-2xl font-bold text-gray-900" id="activeSuppliersCount">-</div>
                </div>
              </div>
            </div>

            <div class="bg-white rounded-lg shadow p-6">
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <div class="w-8 h-8 bg-yellow-100 rounded-md flex items-center justify-center">
                    <svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                </div>
                <div class="ml-4">
                  <div class="text-sm font-medium text-gray-500">Pending Requests</div>
                  <div class="text-2xl font-bold text-gray-900" id="pendingRequestsCount">-</div>
                </div>
              </div>
            </div>

            <div class="bg-white rounded-lg shadow p-6">
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <div class="w-8 h-8 bg-purple-100 rounded-md flex items-center justify-center">
                    <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                    </svg>
                  </div>
                </div>
                <div class="ml-4">
                  <div class="text-sm font-medium text-gray-500">Data Received</div>
                  <div class="text-2xl font-bold text-gray-900" id="dataReceivedCount">-</div>
                </div>
              </div>
            </div>
          </div>

          <!-- Supplier Management Table -->
          <div id="supplierManagementContainer"></div>
        </div>
      </div>
    </div>

    <!-- Add Supplier Modal -->
    <div id="addSupplierModalContainer"></div>

    <!-- Create Data Request Wizard -->
    <div id="dataRequestWizardContainer"></div>

    <!-- Invite Success Modal -->
    <div id="inviteSuccessModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div class="bg-white rounded-lg max-w-md w-full p-6">
        <div class="text-center">
          <div class="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M5 13l4 4L19 7" />
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 mb-2">Invitation Sent!</h3>
          <p class="text-sm text-gray-500 mb-4">The supplier has been sent an invitation email to join your portal.</p>
          <div class="bg-blue-50 border border-blue-200 rounded-md p-3 mb-4">
            <p class="text-sm text-blue-800">
              <strong>Invite URL:</strong><br>
              <span class="font-mono text-xs" id="inviteUrl"></span>
            </p>
          </div>
          <button
            onclick="closeInviteModal()"
            class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
          >
            Close
          </button>
        </div>
      </div>
    </div>

    <script type="module">
      import SupplierManagementTable from '../../components/SupplierManagementTable.tsx'
      import AddSupplierModal from '../../components/AddSupplierModal.tsx'
      import DataRequestWizard from '../../components/DataRequestWizard.tsx'
      import { render } from 'preact'
      import { useState } from 'preact/hooks'
      import { createElement as h } from 'preact'
      import { authenticatedFetch, getApiBaseUrl, handleAuthError } from '../../utils/auth'

      function SuppliersPage() {
        const [showAddSupplier, setShowAddSupplier] = useState(false)
        const [showDataRequestWizard, setShowDataRequestWizard] = useState(false)
        const [refreshKey, setRefreshKey] = useState(0)

        const handleAddSupplier = () => setShowAddSupplier(true)
        const handleCloseAddSupplier = () => setShowAddSupplier(false)
        const handleSupplierAdded = () => {
          setRefreshKey(prev => prev + 1)
          updateStats()
        }

        const handleInviteSupplier = async (supplierId) => {
          const apiBaseUrl = getApiBaseUrl()
          
          try {
            const response = await authenticatedFetch(`${apiBaseUrl}/api/v1/suppliers/${supplierId}/invite`, {
              method: 'POST',
              body: JSON.stringify({})
            })

            if (!response.ok) {
              handleAuthError(response)
              throw new Error('Failed to send invite')
            }

            const data = await response.json()
            document.getElementById('inviteUrl').textContent = data.inviteUrl
            document.getElementById('inviteSuccessModal').classList.remove('hidden')
            setRefreshKey(prev => prev + 1)
          } catch (error) {
            alert('Failed to send invite: ' + error.message)
          }
        }

        const handleDeleteSupplier = () => {
          setRefreshKey(prev => prev + 1)
          updateStats()
        }

        const handleCreateDataRequest = () => setShowDataRequestWizard(true)
        const handleCloseDataRequestWizard = () => setShowDataRequestWizard(false)
        const handleDataRequestCreated = () => {
          setRefreshKey(prev => prev + 1)
        }

        return h('div', {},
          h(SupplierManagementTable, {
            key: refreshKey,
            onAddSupplier: handleAddSupplier,
            onInviteSupplier: handleInviteSupplier,
            onDeleteSupplier: handleDeleteSupplier
          }),
          h(AddSupplierModal, {
            isOpen: showAddSupplier,
            onClose: handleCloseAddSupplier,
            onSuccess: handleSupplierAdded
          }),
          h(DataRequestWizard, {
            isOpen: showDataRequestWizard,
            onClose: handleCloseDataRequestWizard,
            onSuccess: handleDataRequestCreated
          })
        )
      }

      // Mount the component
      render(h(SuppliersPage), document.getElementById('supplierManagementContainer'))

      // Global functions
      window.closeInviteModal = () => {
        document.getElementById('inviteSuccessModal').classList.add('hidden')
      }

      // Wire up create data request button
      document.getElementById('createDataRequestBtn').addEventListener('click', () => {
        const event = new CustomEvent('openDataRequestWizard')
        document.dispatchEvent(event)
      })

      document.addEventListener('openDataRequestWizard', () => {
        setShowDataRequestWizard(true)
      })

      // Update stats
      async function updateStats() {
        const apiBaseUrl = getApiBaseUrl()
        
        try {
          const [suppliersRes, requestsRes] = await Promise.all([
            authenticatedFetch(`${apiBaseUrl}/api/v1/suppliers`),
            authenticatedFetch(`${apiBaseUrl}/api/v1/data-requests`)
          ])

          const suppliersData = await suppliersRes.json()
          const requestsData = await requestsRes.json()

          const suppliers = suppliersData.data || []
          const requests = requestsData.data || []

          document.getElementById('totalSuppliersCount').textContent = suppliers.length
          document.getElementById('activeSuppliersCount').textContent = suppliers.filter(s => s.status === 'active').length
          document.getElementById('pendingRequestsCount').textContent = requests.filter(r => r.status !== 'approved').length
          document.getElementById('dataReceivedCount').textContent = requests.filter(r => r.status === 'submitted' || r.status === 'approved').length
        } catch (error) {
          console.error('Failed to update stats:', error)
        }
      }

      // Initial stats load
      updateStats()
    </script>
  </Layout>
